// Code generated by NodeGenerator. DO NOT EDIT.

// Package node is a generated by the generator.
package node

import (
	"unsafe"
)

// B is a cache entry that provide the following features:
//
// 1. Base
type B[K comparable, V any] struct {
	key   K
	value V
}

// NewB creates a new B.
func NewB[K comparable, V any](key K, value V, expiration int64, weight uint32) Node[K, V] {
	return &B[K, V]{
		key:   key,
		value: value,
	}
}

// CastPointerToB casts a pointer to B.
func CastPointerToB[K comparable, V any](ptr unsafe.Pointer) Node[K, V] {
	return (*B[K, V])(ptr)
}

func (n *B[K, V]) Key() K {
	return n.key
}

func (n *B[K, V]) Value() V {
	return n.value
}

func (n *B[K, V]) AsPointer() unsafe.Pointer {
	return unsafe.Pointer(n)
}

func (n *B[K, V]) Prev() Node[K, V] {
	panic("not implemented")
}

func (n *B[K, V]) SetPrev(v Node[K, V]) {
	panic("not implemented")
}

func (n *B[K, V]) Next() Node[K, V] {
	panic("not implemented")
}

func (n *B[K, V]) SetNext(v Node[K, V]) {
	panic("not implemented")
}

func (n *B[K, V]) PrevExp() Node[K, V] {
	panic("not implemented")
}

func (n *B[K, V]) SetPrevExp(v Node[K, V]) {
	panic("not implemented")
}

func (n *B[K, V]) NextExp() Node[K, V] {
	panic("not implemented")
}

func (n *B[K, V]) SetNextExp(v Node[K, V]) {
	panic("not implemented")
}

func (n *B[K, V]) HasExpired(now int64) bool {
	return false
}

func (n *B[K, V]) Expiration() int64 {
	panic("not implemented")
}

func (n *B[K, V]) Weight() uint32 {
	return 1
}

func (n *B[K, V]) IsAlive() bool {
	return true
}

func (n *B[K, V]) Die() {
	panic("not implemented")
}

func (n *B[K, V]) Frequency() uint8 {
	panic("not implemented")
}

func (n *B[K, V]) IncrementFrequency() {
	panic("not implemented")
}

func (n *B[K, V]) DecrementFrequency() {
	panic("not implemented")
}

func (n *B[K, V]) ResetFrequency() {
	panic("not implemented")
}

func (n *B[K, V]) MarkSmall() {
	panic("not implemented")
}

func (n *B[K, V]) IsSmall() bool {
	panic("not implemented")
}

func (n *B[K, V]) MarkMain() {
	panic("not implemented")
}

func (n *B[K, V]) IsMain() bool {
	panic("not implemented")
}

func (n *B[K, V]) Unmark() {
	panic("not implemented")
}
